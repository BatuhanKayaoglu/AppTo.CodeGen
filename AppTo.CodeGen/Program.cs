using System;
using System.CommandLine;
using AppTo.CodeGen.Commands;
using AppTo.CodeGen.Services;
using AppTo.CodeGen.Models;

var rootCommand = new RootCommand("AppTo Code Generator - CQRS pattern i√ßin kod √ºretici");

var addCommand = new Command("add", "Yeni feature ekle");
var featureCommand = new Command("feature", "Feature olu≈ütur");

var featureNameArgument = new Argument<string>("featureName", "Feature adƒ± (√∂rn: QrSale)");
var typeOption = new Option<FeatureType>("--type", () => FeatureType.Command, "Tip: command veya query");
var moduleOption = new Option<string>("--module", "Mod√ºl adƒ±");
var endpointOption = new Option<string>("--ep", "Endpoint controller adƒ± (√∂rn: Sale)");
var projectNameOption = new Option<string>("--projectName", "Proje adƒ± (√∂rn: Metropol.LUKE)");
var propReqOption = new Option<string>("--prop-req", "Request √∂zellikleri (√∂rn: 'Name:string,Email:string,Age:int,OrderId:int')");
var propRespOption = new Option<string>("--prop-resp", "Response √∂zellikleri (√∂rn: 'Name:string,Email:string,Age:int,OrderId:int')");
var validatorOption = new Option<bool>("--validator", () => true, "Validator olu≈ütur (varsayƒ±lan: true)");

featureCommand.AddArgument(featureNameArgument);
featureCommand.AddOption(typeOption);
featureCommand.AddOption(moduleOption);
featureCommand.AddOption(endpointOption);
featureCommand.AddOption(projectNameOption);
featureCommand.AddOption(propReqOption);
featureCommand.AddOption(propRespOption);
featureCommand.AddOption(validatorOption);

featureCommand.SetHandler(async (string featureName, FeatureType type, string module, string endpoint, string projectName, string propReq, string propResp, bool validator) =>
{
    try
    {
        var locator = new ApplicationLayerLocator();
        var fileSystem = new FileSystemService();
        var generator = new FeatureCommandGenerator(locator, fileSystem);

        await generator.GenerateAsync(featureName, type, endpoint, projectName, propReq, propResp, validator);

        Console.ForegroundColor = ConsoleColor.DarkGreen;
        Console.WriteLine($"\n‚úÖ {featureName} {type} ba≈üarƒ±yla olu≈üturuldu!");
        var commandType = type == FeatureType.Command ? "Command" : "Query";
        Console.WriteLine($"üìÅ Handler: {featureName}{commandType}Handler.cs");
        Console.WriteLine($"üìÅ {commandType}: {featureName}{commandType}.cs");
        if (validator)
        {
            var validatorType = type == FeatureType.Command ? "CommandValidator" : "QueryValidator";
            Console.WriteLine($"üìÅ Validator: {featureName}{validatorType}.cs");
        }
        Console.WriteLine($"üìÅ Request: {featureName}Request.cs");
        Console.WriteLine($"üìÅ Response: {featureName}Response.cs");
        if (!string.IsNullOrEmpty(endpoint))
        {
            Console.WriteLine($"üìÅ Endpoint: {endpoint}Controller.cs i√ßine eklendi");
        }
        Console.ResetColor();
    }
    catch (Exception ex)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine($"‚ùå Hata: {ex.Message}");
        Console.ResetColor();
    }
}, featureNameArgument, typeOption, moduleOption, endpointOption, projectNameOption, propReqOption, propRespOption, validatorOption);

addCommand.AddCommand(featureCommand);
rootCommand.AddCommand(addCommand);

return await rootCommand.InvokeAsync(args);